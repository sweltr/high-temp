---
title: "6. Beta Diversity & Dispersion Estimates"
description: |
  Reproducible workflow for assessing community dissimilarity across temperature treatments.
format:
  html:
    toc: true
    toc-depth: 3
---

<details markdown="1">
<summary><strong>Click here</strong> for setup information.</summary>

```{r}
#| message: false
#| results: hide

knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
set.seed(119)
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
pacman::p_load(tidyverse, 
               microbiome, phytools, phangorn, reactable, Matrix, 
               pairwiseAdonis, naniar, downloadthis,
               labdsv, patchwork, agricolae, captioner, microeco,
               install = FALSE, update = FALSE)

#pacman::p_depends(agricolae, local = TRUE)  
#pacman::p_depends_reverse(agricolae, local = TRUE)  

options(scipen=999)
knitr::opts_current$get(c(
  "cache",
  "cache.path",
  "cache.rebuild",
  "dependson",
  "autodep"
))
```

</details> 

```{r}
#| include: false
#| eval: true
## Load to build page only #2
remove(list = ls())
load("page_build/beta_wf_part_1.rdata")
```

```{r}
#| echo: false
#| eval: true
#| results: hide
# Create the caption(s) with captioner
caption_tab_ssu <- captioner(prefix = "(16S rRNA) Table", suffix = " |", style = "b")
caption_fig_ssu <- captioner(prefix = "(16S rRNA) Figure", suffix = " |", style = "b")

caption_tab_its <- captioner(prefix = "(ITS) Table", suffix = " |", style = "b")
caption_fig_its <- captioner(prefix = "(ITS) Figure", suffix = " |", style = "b")
# Create a function for referring to the tables in text
ref <- function(x) str_extract(x, "[^|]*") %>% 
  trimws(which = "right", whitespace = "[ ]")
```

```{r}
#| echo: false
#| eval: true
source("assets/captions/captions_beta.R")
```

# Synopsis

This workflow contains beta diversity assessments for the high temperature data sets. In order to run the workflow, you either need to first run the  [DADA2 Workflow for 2018 High Temp samples](dada2.html), the [Data Preparation workflow](data-prep.html), and the [Alpha diversity workflow](alpha.html) **or** download the files linked below. See the [Data Availability](data-availability.html) page for complete details.

## Workflow Input

Files needed to run this workflow can be downloaded from figshare. 

<iframe src="https://widgets.figshare.com/articles/16826779/embed?show_title=1" width="100%" height="251" allowfullscreen frameborder="0"></iframe>

# 16s rRNA

```{r}
#| include: false
#| eval: false
## Initial Load for  ANALYSIS #1
set.seed(119)
ssu18_ps_work <- readRDS("files/alpha/rdata/ssu18_ps_work.rds")
ssu18_ps_filt <- readRDS("files/alpha/rdata/ssu18_ps_filt.rds")
ssu18_ps_perfect <- readRDS("files/alpha/rdata/ssu18_ps_perfect.rds")
ssu18_ps_pime <- readRDS("files/alpha/rdata/ssu18_ps_pime.rds")
```

```{r}
#| echo: false
swel_col <- c("#2271B2", "#71B222", "#B22271")
```

In order to test for significance between sample groups, we must perform the following steps:

1. Transform sample counts to relative abundance.
2. Create distance matrices based on some metrics, for example `wunifrac`, `unifrac`, and `jsd`. For this we use the function `phyloseq::distance`.
3. Next, calculate beta dispersion using the `betadisper` function from the `vegan` package [@oksanen2013community].
4. Then, use the function `permutest` to run a Permutation test for homogeneity of multivariate dispersions.
5. If the beta dispersion tests are not significant we will run a PERMANOVA using `adonis` (since PERMANOVA assumes equal dispersion), otherwise we will use Analysis of Similarity (ANOSIM), both available in the `vegan` package [@oksanen2013community].

Steps 2--4 are combined in a `for` loop that tests all three distance metrics.

Before we begin, we need to first transform sample counts to relative abundance and generate some new trees.

```{r}
#| code-fold: true
ssu_samp_ps <- c("ssu18_ps_work", "ssu18_ps_filt", 
             "ssu18_ps_perfect", "ssu18_ps_pime")
for (i in ssu_samp_ps) {
     tmp_name <- purrr::map_chr(i, ~ paste0(., "_prop"))
     tmp_get <- get(i)
     tmp_ps <- transform_sample_counts(tmp_get, function(otu) 
                                          1e5 * otu/sum(otu))
     tmp_ps@phy_tree <- NULL
     tmp_ps <- prune_samples(sample_sums(tmp_ps) > 0, tmp_ps)
     tmp_tree <- rtree(ntaxa(tmp_ps), rooted = TRUE, 
                       tip.label = taxa_names(tmp_ps))
     tmp_ps <- merge_phyloseq(tmp_ps, sample_data, tmp_tree)
     print(tmp_name)
     assign(tmp_name, tmp_ps)
     rm(list = ls(pattern = "tmp_"))
}
```

## Beta Dispersion

Here we create distance matrices for each metric, calculate the beta dispersion, and run a permutation test for homogeneity of multivariate dispersions. 

```{r}
#| code-fold: true
ssu_dist <- c("jsd", "unifrac", "wunifrac")
for (i in ssu_samp_ps) {
    for (d in ssu_dist){
       tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_prop")))
       tmp_samp <- data.frame(sample_data(tmp_get))
       tmp_df <- phyloseq::distance(tmp_get, method = d)
       tmp_df_name <- purrr::map_chr(d, ~ paste0(i, "_beta_dist_", .))
       assign(tmp_df_name, tmp_df)
       tmp_df2 <- betadisper(tmp_df, tmp_samp$TEMP, bias.adjust = TRUE)
       tmp_df_name2 <- purrr::map_chr(d, ~ paste0(i, "_beta_dispersion_", .))
       assign(tmp_df_name2, tmp_df2)
       tmp_df3 <- permutest(tmp_df2, pairwise = TRUE,
                            permutations = 1000, binary = FALSE)
       tmp_df_name3 <- purrr::map_chr(d, ~ paste0(i, "_permutest_", .))
       assign(tmp_df_name3, tmp_df3)
       rm(list = ls(pattern = "tmp_"))
    }
}
objects()
```

<details markdown="1">
<summary><strong>Detailed results</strong> of Beta Dispersion & Permutation tests</summary>

::: {.panel-tabset}

```{r}
#| echo: false
#| eval: true
ssu_samp_ps <- c("ssu18_ps_work", "ssu18_ps_filt", "ssu18_ps_perfect", "ssu18_ps_pime")
ssu_dist <- c("jsd", "unifrac", "wunifrac")
```

#### FULL

```{r}
#| echo: false
#| eval: true
for (i in ssu_samp_ps[1]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in ssu_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}
```

#### Arbitrary

```{r}
#| echo: false
#| eval: true
for (i in ssu_samp_ps[2]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in ssu_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}

```

#### PERfect

```{r}
#| echo: false
#| eval: true
for (i in ssu_samp_ps[3]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in ssu_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}
```

#### PIME

```{r}
#| echo: false
#| eval: true
for (i in ssu_samp_ps[4]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in ssu_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}
```
:::

</details>

Remember, if the beta dispersion p-value is greater than `0.05` we use PERMANOVA, otherwise we use ANOSIM.

```{r}
#| echo: false
#| eval: true
#| results: markup
ssu18_perm_pvalues <- data.frame()
for (i in ssu_samp_ps) {
        for (d in ssu_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(., "_permutest_", d)))
          tmp_pv <- tmp_get$tab$`Pr(>F)`[1]

          tmp_test <- if(tmp_pv < 0.05){
            tmp_test <- "ANOSIM"
          } else {
            tmp_test <- "ADONIS"
          }
          tmp_df <- data.frame(i, d, tmp_pv, tmp_test)
          ssu18_perm_pvalues <- dplyr::bind_rows(ssu18_perm_pvalues, tmp_df)
          rm(list = ls(pattern = "tmp_"))
    }
}
ssu18_perm_pvalues <- ssu18_perm_pvalues %>% 
  dplyr::rename(c("data_set" = 1, "dist" = 2, "pval" = 3, "test" = 4))
ssu18_perm_pvalues <- ssu18_perm_pvalues %>% tibble::remove_rownames()
```


```{r}
#| echo: false
ssu18_perm_summary <- ssu18_perm_pvalues
ssu18_perm_summary <- ssu18_perm_summary %>% separate(col = 1, 
                                              into = c("dummy", "metric", "dataset"), 
                                              sep = "_", remove = TRUE)
ssu18_perm_summary[,1:2] <- NULL 

ssu18_perm_summary$dataset <- stringr::str_replace(ssu18_perm_summary$dataset, "work", "FULL") %>%
                              stringr::str_replace(., "filt", "FILT") %>%
                              stringr::str_replace(., "pime", "PIME") %>%
                              stringr::str_replace(., "perfect", "PERfect")
ssu18_perm_summary$dist <- stringr::str_replace(ssu18_perm_summary$dist, "jsd", "Jensen–Shannon divergence") %>%
                              stringr::str_replace(., "wunifrac", "weighted UniFrac") %>%
                              stringr::str_replace(., "unifrac", "unweighted UniFrac")
ssu18_perm_summary$pval <- round(ssu18_perm_summary[[3]], 4)
```

<small>`r caption_tab_ssu("ssu_beta_disp_tests")`</small>

```{r}
#| echo: false
#| eval: true
seq_table <- ssu18_perm_summary
seq_table %>%
  download_this(
    output_name = "ssu_beta_disp_tests",
    output_extension = ".csv",
    button_label = "Download data as csv file",
    button_type = "default",
    csv2 = FALSE,
    has_icon = TRUE,
    icon = "fa fa-save")
```

```{r}
#| echo: false
#| eval: true
reactable(seq_table,
  defaultColDef = colDef(
    header = function(value) gsub("_", " ", value, fixed = TRUE),
    cell = function(value) format(value, nsmall = 4),
    align = "center", filterable = TRUE, sortable = TRUE, resizable = TRUE,
    footerStyle = list(fontWeight = "bold"), minWidth = 100, headerVAlign = "center"
    ), 
  columns = list(
    dataset = colDef(name = "Dataset", 
                       sticky = "left", 
                       style = list(borderRight = "1px solid #eee"),
                       headerStyle = list(borderRight = "1px solid #eee"), 
                       align = "left",
                       minWidth = 50),
    dist = colDef(name = "distance", align = "left"),
    `pval` = colDef(name = "p-value", minWidth = 100, resizable = FALSE,
                                   style = function(value) {
                                         if (value > 0.05) {
                                           color <- "#2271B2"
                                         } else if (value < 0.05) {
                                           color <- "#B22271"
                                         } else {
                                           color <- "#777"
                                         }
                                         list(color = color, fontWeight = "bold")
    })
    ), 
  searchable = FALSE, defaultPageSize = 12, showPagination = FALSE,
  pageSizeOptions = c(5, 10, nrow(seq_table)), 
  showPageSizeOptions = TRUE, highlight = TRUE, 
  bordered = TRUE, striped = TRUE, compact = TRUE, 
  wrap = TRUE, showSortable = TRUE, fullWidth = TRUE,
  theme = reactableTheme(style = list(fontSize = "0.8em")))
rm(seq_table)
```

Now we to create sample data frames for each data set. 

```{r}
#| code-fold: true
for (i in ssu_samp_ps) {
     tmp_get <- get(purrr::map_chr(i, ~ paste0(., "_prop")))
     tmp_samp <- data.frame(sample_data(tmp_get))
     tmp_name <- purrr::map_chr(i, ~ paste0(., "_sampledf"))
     assign(tmp_name, tmp_samp)
     rm(list = ls(pattern = "tmp_"))
}
objects(pattern="_sampledf")
```

## Significance Tests 

Depending on the test, we need different data structures. For `adonis` we use the sample metadata and for `anosim` we will start with a phyloseq object. So for each data set we create two variables: `adonis_sampledf` and `anosim_data`

::: {.column-body}
::: {.panel-tabset}

#### FULL

```{r}
#| echo: false
adonis_sampledf <- ssu18_ps_work_sampledf
anosim_data <- ssu18_ps_work
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- ssu18_perm_pvalues[ssu18_perm_pvalues$data_set == 'ssu18_ps_work',]
```

Is the p-value of the `r ssu18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
ssu18_ps_work_adonis_jsd <-  adonis(ssu18_ps_work_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
ssu18_ps_work_adonis2_jsd <- adonis2(ssu18_ps_work_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
ssu18_ps_work_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_work_anosim_unifrac <-
  anosim(phyloseq::distance(ssu18_ps_work_prop, "unifrac"),
         grouping = ssu18_ps_work_groups)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
ssu18_ps_work_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_work_anosim_wunifrac <-
  anosim(phyloseq::distance(ssu18_ps_work_prop, "wunifrac"),
         grouping = ssu18_ps_work_groups)
```

#### Arbitrary

```{r}
#| echo: false
adonis_sampledf <- ssu18_ps_filt_sampledf
anosim_data <- ssu18_ps_filt
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- ssu18_perm_pvalues[ssu18_perm_pvalues$data_set == 'ssu18_ps_filt',]
```

Is the p-value of the `r ssu18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
ssu18_ps_filt_adonis_jsd <-  adonis(ssu18_ps_filt_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
ssu18_ps_filt_adonis2_jsd <- adonis2(ssu18_ps_filt_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
ssu18_ps_filt_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_filt_anosim_unifrac <-
  anosim(phyloseq::distance(ssu18_ps_filt_prop, "unifrac"),
         grouping = ssu18_ps_filt_groups)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
ssu18_ps_filt_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_filt_anosim_wunifrac <-
  anosim(phyloseq::distance(ssu18_ps_filt_prop, "wunifrac"),
         grouping = ssu18_ps_filt_groups)
```

#### PERfect

```{r}
#| echo: false
adonis_sampledf <- ssu18_ps_perfect_sampledf
anosim_data <- ssu18_ps_perfect
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- ssu18_perm_pvalues[ssu18_perm_pvalues$data_set == 'ssu18_ps_perfect',]
```

Is the p-value of the `r ssu18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
ssu18_ps_perfect_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_perfect_anosim_jsd <-
  anosim(phyloseq::distance(ssu18_ps_perfect_prop, "jsd"),
         grouping = ssu18_ps_perfect_groups)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
ssu18_ps_perfect_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_perfect_anosim_unifrac <-
  anosim(phyloseq::distance(ssu18_ps_perfect_prop, "unifrac"),
         grouping = ssu18_ps_perfect_groups)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
ssu18_ps_perfect_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_perfect_anosim_wunifrac <-
  anosim(phyloseq::distance(ssu18_ps_perfect_prop, "wunifrac"),
         grouping = ssu18_ps_perfect_groups)
```

#### PIME

```{r}
#| echo: false
adonis_sampledf <- ssu18_ps_pime_sampledf
anosim_data <- ssu18_ps_pime
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- ssu18_perm_pvalues[ssu18_perm_pvalues$data_set == 'ssu18_ps_pime',]
```

Is the p-value of the `r ssu18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
ssu18_ps_pime_adonis_jsd <-  adonis(ssu18_ps_pime_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
ssu18_ps_pime_adonis2_jsd <- adonis2(ssu18_ps_pime_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
ssu18_ps_pime_adonis_unifrac <-  adonis(ssu18_ps_pime_beta_dist_unifrac ~ TEMP,
                                     data = adonis_sampledf, permutations = 1000)
ssu18_ps_pime_adonis2_unifrac <- adonis2(ssu18_ps_pime_beta_dist_unifrac ~ TEMP,
                                      data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
ssu18_ps_pime_groups <- get_variable(anosim_data, "TEMP")
ssu18_ps_pime_anosim_wunifrac <-
  anosim(phyloseq::distance(ssu18_ps_pime_prop, "wunifrac"),
         grouping = ssu18_ps_pime_groups)
```

:::
:::


<details markdown="1">
<summary><strong>Detailed results</strong> of Significance tests</summary>

::: {.panel-tabset}

#### FULL

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
ssu18_ps_work_adonis2_jsd
cat("\n")

cat("\n", "***ANOSIM for Unweighted UniFrac distance, `unifrac`***", "\n\n")
summary(ssu18_ps_work_anosim_unifrac)
cat("\n")

cat("\n", "***ANOSIM for Weighted-UniFrac distance, `wunifrac`***", "\n\n")
summary(ssu18_ps_work_anosim_wunifrac)
cat("\n")
```

#### Arbitrary

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
ssu18_ps_filt_adonis2_jsd
cat("\n")

cat("\n", "***ANOSIM for Unweighted UniFrac distance, `unifrac`***", "\n\n")
summary(ssu18_ps_filt_anosim_unifrac)
cat("\n")

cat("\n", "***ANOSIM for Weighted-UniFrac distance, `wunifrac`***", "\n\n")
summary(ssu18_ps_filt_anosim_wunifrac)
cat("\n")
```

#### PERfect

```{r}
#| echo: false
#| eval: true
cat("\n", "***ANOSIM for Jensen-Shannon Divergence, `jsd`***", "\n\n")
summary(ssu18_ps_perfect_anosim_jsd)
cat("\n")

cat("\n", "***ANOSIM for Unweighted UniFrac distance, `unifrac`***", "\n\n")
summary(ssu18_ps_perfect_anosim_unifrac)
cat("\n")

cat("\n", "***ANOSIM for Weighted-UniFrac distance, `wunifrac`***", "\n\n")
summary(ssu18_ps_perfect_anosim_wunifrac)
cat("\n")
```

#### PIME

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
ssu18_ps_pime_adonis2_jsd
cat("\n")

cat("\n", "***PERMANOVA for Unweighted UniFrac distance, `unifrac`***", "\n\n")
ssu18_ps_pime_adonis2_unifrac
cat("\n")

cat("\n", "***ANOSIM for Weighted-UniFrac distance, `wunifrac`***", "\n\n")
summary(ssu18_ps_pime_anosim_wunifrac)
cat("\n")
```
:::

</details>

## Summaries 

Here is a quick summary of significance tests for the data sets against three distance matrices.

```{r}
#| echo: false
data_set <- data.frame(c("FULL", "FILT", "PERfect", "PIME"))
ssu_dist_metric <- data.frame(c("Jensen-Shannon Divergence", "unweighted UniFrac", "weighted UniFrac"))

tmp_p_value_full <- data.frame(c(ssu18_ps_work_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 ssu18_ps_work_anosim_unifrac$signif,
                                 ssu18_ps_work_anosim_wunifrac$signif))

tmp_p_value_perfect <- data.frame(c(ssu18_ps_perfect_anosim_jsd$signif,
                                    ssu18_ps_perfect_anosim_unifrac$signif,
                                    ssu18_ps_perfect_anosim_wunifrac$signif))

tmp_p_value_filt <- data.frame(c(ssu18_ps_filt_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 ssu18_ps_filt_anosim_unifrac$signif,
                                 ssu18_ps_filt_anosim_wunifrac$signif))

tmp_p_value_pime <- data.frame(c(ssu18_ps_pime_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 ssu18_ps_pime_adonis_unifrac$aov.tab$`Pr(>F)`[1],
                                 ssu18_ps_pime_anosim_wunifrac$signif))

ssu18_tab_sig_test <- dplyr::bind_cols(ssu_dist_metric, tmp_p_value_full) %>%
                      dplyr::bind_cols(., tmp_p_value_filt) %>%
                      dplyr::bind_cols(., tmp_p_value_perfect) %>%
                      dplyr::bind_cols(., tmp_p_value_pime)  %>%
  dplyr::rename("distance metric" = 1, "FULL" = 2, "FILT" = 3, "PERfect" = 4, "PIME" = 5) 

ssu18_tab_sig_test <- ssu18_tab_sig_test %>%  
  dplyr::mutate(across(.cols = c(2:ncol(ssu18_tab_sig_test)), round, digits = 4))
rm(list = ls(pattern = "tmp_"))
```
<small>`r caption_tab_ssu("ssu_sign_tests")`</small>

```{r}
#| echo: false
#| eval: true
seq_table <- ssu18_tab_sig_test
seq_table %>%
  download_this(
    output_name = "ssu_sign_tests",
    output_extension = ".csv",
    button_label = "Download data as csv file",
    button_type = "default",
    csv2 = FALSE,
    has_icon = TRUE,
    icon = "fa fa-save")
```

```{r}
#| echo: false
#| eval: true
reactable(seq_table,
  defaultColDef = colDef(
    header = function(value) gsub("_", " ", value, fixed = TRUE),
    cell = function(value) format(value, nsmall = 3),
    align = "center", filterable = FALSE, sortable = FALSE, resizable = TRUE,
    footerStyle = list(fontWeight = "bold"), minWidth = 100, headerVAlign = "center",
    style = function(value) {
                                         if (value > 0.05) {
                                           color <- "#2271B2"
                                         } else if (value < 0.05) {
                                           color <- "#B22271"
                                         } else {
                                           color <- "#777"
                                         }
                                         list(color = color, fontWeight = "bold")
                            }
    ), 
  columns = list(
    `distance metric` = colDef(name = "Distance metric", 
                       sticky = "left", 
                       style = list(borderRight = "1px solid #eee"),
                       headerStyle = list(borderRight = "1px solid #eee"), 
                       align = "left",
                       minWidth = 200),
    dist = colDef(name = "distance", align = "left")
    ),
  columnGroups = list(colGroup(name = "p-values", columns = c("FULL", "FILT", "PERfect", "PIME"),
                       headerStyle = list(fontSize = "1.3em"))
    ),
  searchable = FALSE, defaultPageSize = 12, showPagination = FALSE,
  pageSizeOptions = c(5, 10, nrow(seq_table)), 
  showPageSizeOptions = FALSE, highlight = TRUE, 
  bordered = TRUE, striped = TRUE, compact = TRUE, 
  wrap = TRUE, showSortable = FALSE, fullWidth = TRUE,
  theme = reactableTheme(style = list(fontSize = "0.9em")))
rm(seq_table)
```

# ITS

```{r}
#| include: false
#| eval: false

## Initial Load for  ANALYSIS #1
#remove(list = ls())
#set.seed(119)
its18_ps_work <- readRDS("files/alpha/rdata/its18_ps_work.rds")
its18_ps_filt <- readRDS("files/alpha/rdata/its18_ps_filt.rds")
its18_ps_perfect <- readRDS("files/alpha/rdata/its18_ps_perfect.rds")
its18_ps_pime <- readRDS("files/alpha/rdata/its18_ps_pime.rds")
```

```{r}
#| echo: false
swel_col <- c("#2271B2", "#71B222", "#B22271")
```

In order to test for significance between sample groups, we must perform the following steps:

1. Transform sample counts to relative abundance.
2. Create distance matrices based on some metrics, for example `gower`, `bray`, and `jsd`. For this we use the function `phyloseq::distance`.
3. Next, calculate beta dispersion using the `betadisper` function from the `vegan` package [@oksanen2013community].
4. Then, use the function `permutest` to run a Permutation test for homogeneity of multivariate dispersions.
5. If the beta dispersion tests are not significant we will run a PERMANOVA using `adonis` (since PERMANOVA aitsmes equal dispersion), otherwise we will use Analysis of Similarity (ANOSIM), both available in the `vegan` package [@oksanen2013community].

Steps 2--4 are combined in a `for` loop that tests all three distance metrics.

Before we begin, we need to first transform sample counts to relative abundance and generate some new trees.

```{r}
#| code-fold: true
its_samp_ps <- c("its18_ps_work", "its18_ps_filt", 
             "its18_ps_perfect", "its18_ps_pime")
for (i in its_samp_ps) {
     tmp_name <- purrr::map_chr(i, ~ paste0(., "_prop"))
     tmp_get <- get(i)
     tmp_ps <- transform_sample_counts(tmp_get, function(otu) 
                                          1e5 * otu/sum(otu))
     tmp_ps@phy_tree <- NULL
     tmp_ps <- prune_samples(sample_sums(tmp_ps) > 0, tmp_ps)
     tmp_ps <- merge_phyloseq(tmp_ps, sample_data)
     print(tmp_name)
     assign(tmp_name, tmp_ps)
     rm(list = ls(pattern = "tmp_"))
}
```

### Beta Dispersion

Here we create distance matrices for each metric, calculate the beta dispersion, and run a permutation test for homogeneity of multivariate dispersions. 

```{r}
#| code-fold: true
its_dist <- c("jsd", "bray", "gower")
for (i in its_samp_ps) {
    for (d in its_dist){
       tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_prop")))
       tmp_samp <- data.frame(sample_data(tmp_get))
       tmp_df <- phyloseq::distance(tmp_get, method = d)
       tmp_df_name <- purrr::map_chr(d, ~ paste0(i, "_beta_dist_", .))
       assign(tmp_df_name, tmp_df)
       tmp_df2 <- betadisper(tmp_df, tmp_samp$TEMP, bias.adjust = TRUE)
       tmp_df_name2 <- purrr::map_chr(d, ~ paste0(i, "_beta_dispersion_", .))
       assign(tmp_df_name2, tmp_df2)
       tmp_df3 <- permutest(tmp_df2, pairwise = TRUE,
                            permutations = 1000, binary = FALSE)
       tmp_df_name3 <- purrr::map_chr(d, ~ paste0(i, "_permutest_", .))
       assign(tmp_df_name3, tmp_df3)
       rm(list = ls(pattern = "tmp_"))
    }
}
objects()
```

<details markdown="1">
<summary><strong>Detailed results</strong> of Beta Dispersion & Permutation tests</summary>

::: {.panel-tabset}

```{r}
#| echo: false
#| eval: true
its_samp_ps <- c("its18_ps_work", "its18_ps_filt", "its18_ps_perfect", "its18_ps_pime")
its_dist <- c("jsd", "bray", "gower")
```

#### FULL

```{r}
#| echo: false
#| eval: true
for (i in its_samp_ps[1]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in its_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}
```

#### Arbitrary

```{r}
#| echo: false
#| eval: true
for (i in its_samp_ps[2]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in its_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}

```

#### PERfect

```{r}
#| echo: false
#| eval: true
for (i in its_samp_ps[3]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in its_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}
```

#### PIME

```{r}
#| echo: false
#| eval: true
for (i in its_samp_ps[4]) {
  #cat("\n", "           *****", i, "*****", "\n")
        for (d in its_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(i, "_permutest_", d)))
          cat("\n")
          cat("####################################################", "\n")
          tmp_print <- c("BETA DISPERSION significance test", d, "distance")
          cat(tmp_print, "\n")
          cat("####################################################")
          cat("\n")
          print(tmp_get)
          rm(list = ls(pattern = "tmp_"))
        }
}
```
:::

</details>

Remember, if the beta dispersion p-value is greater than `0.05` we use PERMANOVA, otherwise we use ANOSIM.

```{r}
#| echo: false
#| eval: true
#| results: markup
its18_perm_pvalues <- data.frame()
for (i in its_samp_ps) {
        for (d in its_dist){
          tmp_get <- get(purrr::map_chr(i, ~ paste0(., "_permutest_", d)))
          tmp_pv <- tmp_get$tab$`Pr(>F)`[1]

          tmp_test <- if(tmp_pv < 0.05){
            tmp_test <- "ANOSIM"
          } else {
            tmp_test <- "ADONIS"
          }
          tmp_df <- data.frame(i, d, tmp_pv, tmp_test)
          its18_perm_pvalues <- dplyr::bind_rows(its18_perm_pvalues, tmp_df)
          rm(list = ls(pattern = "tmp_"))
    }
}
its18_perm_pvalues <- its18_perm_pvalues %>% 
  dplyr::rename(c("data_set" = 1, "dist" = 2, "pval" = 3, "test" = 4))
its18_perm_pvalues <- its18_perm_pvalues %>% tibble::remove_rownames()
```


```{r}
#| echo: false
its18_perm_summary <- its18_perm_pvalues
its18_perm_summary <- its18_perm_summary %>% separate(col = 1, 
                                              into = c("dummy", "metric", "dataset"), 
                                              sep = "_", remove = TRUE)
its18_perm_summary[,1:2] <- NULL 

its18_perm_summary$dataset <- stringr::str_replace(its18_perm_summary$dataset, "work", "FULL") %>%
                              stringr::str_replace(., "filt", "FILT") %>%
                              stringr::str_replace(., "pime", "PIME") %>%
                              stringr::str_replace(., "perfect", "PERfect")
its18_perm_summary$dist <- stringr::str_replace(its18_perm_summary$dist, "jsd", "Jensen–Shannon divergence") %>%
                              stringr::str_replace(., "gower", "Gower distance") %>%
                              stringr::str_replace(., "bray", "Bray-Curtis dissimilarity")
its18_perm_summary$pval <- round(its18_perm_summary[[3]], 4)
```
<small>`r caption_tab_its("its_beta_disp_tests")`</small>

```{r}
#| echo: false
#| eval: true
seq_table <- its18_perm_summary
seq_table %>%
  download_this(
    output_name = "its_beta_disp_tests",
    output_extension = ".csv",
    button_label = "Download data as csv file",
    button_type = "default",
    csv2 = FALSE,
    has_icon = TRUE,
    icon = "fa fa-save")
```

```{r}
#| echo: false
#| eval: true
reactable(seq_table,
  defaultColDef = colDef(
    header = function(value) gsub("_", " ", value, fixed = TRUE),
    cell = function(value) format(value, nsmall = 4),
    align = "center", filterable = TRUE, sortable = TRUE, resizable = TRUE,
    footerStyle = list(fontWeight = "bold"), minWidth = 100, headerVAlign = "center"
    ), 
  columns = list(
    dataset = colDef(name = "Dataset", 
                       sticky = "left", 
                       style = list(borderRight = "1px solid #eee"),
                       headerStyle = list(borderRight = "1px solid #eee"), 
                       align = "left",
                       minWidth = 50),
    dist = colDef(name = "distance", align = "left"),
    `pval` = colDef(name = "p-value", minWidth = 100, resizable = FALSE,
                                   style = function(value) {
                                         if (value > 0.05) {
                                           color <- "#2271B2"
                                         } else if (value < 0.05) {
                                           color <- "#B22271"
                                         } else {
                                           color <- "#777"
                                         }
                                         list(color = color, fontWeight = "bold")
    })
    ), 
  searchable = FALSE, defaultPageSize = 12, showPagination = FALSE,
  pageSizeOptions = c(5, 10, nrow(seq_table)), 
  showPageSizeOptions = TRUE, highlight = TRUE, 
  bordered = TRUE, striped = TRUE, compact = TRUE, 
  wrap = TRUE, showSortable = TRUE, fullWidth = TRUE,
  theme = reactableTheme(style = list(fontSize = "0.8em")))
rm(seq_table)
```

Now we to create sample data frames for each data set. 

```{r}
#| code-fold: true
for (i in its_samp_ps) {
     tmp_get <- get(purrr::map_chr(i, ~ paste0(., "_prop")))
     tmp_samp <- data.frame(sample_data(tmp_get))
     tmp_name <- purrr::map_chr(i, ~ paste0(., "_sampledf"))
     assign(tmp_name, tmp_samp)
     rm(list = ls(pattern = "tmp_"))
}
objects(pattern="_sampledf")
```

## Significance Tests 

Depending on the test, we need different data structures. For `adonis` we use the sample metadata and for `anosim` we will start with a phyloseq object. So for each data set we create two variables: `adonis_sampledf` and `anosim_data`


::: {.column-body}
::: {.panel-tabset}

#### FULL

```{r}
#| echo: false
adonis_sampledf <- its18_ps_work_sampledf
anosim_data <- its18_ps_work
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- its18_perm_pvalues[its18_perm_pvalues$data_set == 'its18_ps_work',]
```

Is the p-value of the `r its18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
its18_ps_work_adonis_jsd <-  adonis(its18_ps_work_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_work_adonis2_jsd <- adonis2(its18_ps_work_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
its18_ps_work_adonis_bray <-  adonis(its18_ps_work_beta_dist_bray ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_work_adonis2_bray <- adonis2(its18_ps_work_beta_dist_bray ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
its18_ps_work_adonis_gower <-  adonis(its18_ps_work_beta_dist_gower ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_work_adonis2_gower <- adonis2(its18_ps_work_beta_dist_gower ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

#### Arbitrary

```{r}
#| echo: false
adonis_sampledf <- its18_ps_filt_sampledf
anosim_data <- its18_ps_filt
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- its18_perm_pvalues[its18_perm_pvalues$data_set == 'its18_ps_filt',]
```

Is the p-value of the `r its18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
its18_ps_filt_adonis_jsd <-  adonis(its18_ps_filt_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_filt_adonis2_jsd <- adonis2(its18_ps_filt_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
its18_ps_filt_adonis_bray <-  adonis(its18_ps_filt_beta_dist_bray ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_filt_adonis2_bray <- adonis2(its18_ps_filt_beta_dist_bray ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
its18_ps_filt_adonis_gower <-  adonis(its18_ps_filt_beta_dist_gower ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_filt_adonis2_gower <- adonis2(its18_ps_filt_beta_dist_gower ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

#### PERfect

```{r}
#| echo: false
adonis_sampledf <- its18_ps_perfect_sampledf
anosim_data <- its18_ps_perfect
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- its18_perm_pvalues[its18_perm_pvalues$data_set == 'its18_ps_perfect',]
```

Is the p-value of the `r its18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
its18_ps_perfect_adonis_jsd <-  adonis(its18_ps_perfect_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_perfect_adonis2_jsd <- adonis2(its18_ps_perfect_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
its18_ps_perfect_adonis_bray <-  adonis(its18_ps_perfect_beta_dist_bray ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_perfect_adonis2_bray <- adonis2(its18_ps_perfect_beta_dist_bray ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
its18_ps_perfect_adonis_gower <-  adonis(its18_ps_perfect_beta_dist_gower ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_perfect_adonis2_gower <- adonis2(its18_ps_perfect_beta_dist_gower ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

#### PIME

```{r}
#| echo: false
adonis_sampledf <- its18_ps_pime_sampledf
anosim_data <- its18_ps_pime
```

```{r}
#| echo: false
#| eval: true
tmp_perm_tests <- its18_perm_pvalues[its18_perm_pvalues$data_set == 'its18_ps_pime',]
```

Is the p-value of the `r its18_perm_pvalues$dist[1]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[1] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[1]`**.

```{r}
its18_ps_pime_adonis_jsd <-  adonis(its18_ps_pime_beta_dist_jsd ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_pime_adonis2_jsd <- adonis2(its18_ps_pime_beta_dist_jsd ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[2]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[2] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[2]`**.

```{r}
its18_ps_pime_adonis_bray <-  adonis(its18_ps_pime_beta_dist_bray ~ TEMP,
                                 data = adonis_sampledf, permutations = 1000)
its18_ps_pime_adonis2_bray <- adonis2(its18_ps_pime_beta_dist_bray ~ TEMP,
                                  data = adonis_sampledf, permutations = 1000)
```

Is the p-value of the `r tmp_perm_tests$dist[3]` distance metric less than `0.05`?  `r eval(isTRUE(tmp_perm_tests$pval[3] < 0.05))`.  
Then we use **`r tmp_perm_tests$test[3]`**.

```{r}
its18_ps_pime_groups <- get_variable(anosim_data, "TEMP")
its18_ps_pime_anosim_gower <-
  anosim(phyloseq::distance(its18_ps_pime_prop, "gower"),
         grouping = its18_ps_pime_groups)
```

:::
:::


<details markdown="1">
<summary><strong>Detailed results</strong> of Significance tests.</summary>

::: {.panel-tabset}

#### FULL

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
its18_ps_work_adonis2_jsd
cat("\n")

cat("\n", "***PERMANOVA for Bray-Curtis dissimilarity, `bray`***", "\n\n")
summary(its18_ps_work_adonis2_bray)
cat("\n")

cat("\n", "***PERMANOVA for Gower distance, `gower`***", "\n\n")
summary(its18_ps_work_adonis2_gower)
cat("\n")
```


#### Arbitrary

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
its18_ps_filt_adonis2_jsd
cat("\n")

cat("\n", "***PERMANOVA for Bray-Curtis dissimilarity, `bray`***", "\n\n")
summary(its18_ps_filt_adonis2_bray)
cat("\n")

cat("\n", "***PERMANOVA for Gower distance, `gower`***", "\n\n")
summary(its18_ps_filt_adonis2_gower)
cat("\n")
```


#### PERfect

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
its18_ps_perfect_adonis2_jsd
cat("\n")

cat("\n", "***PERMANOVA for Bray-Curtis dissimilarity, `bray`***", "\n\n")
summary(its18_ps_perfect_adonis2_bray)
cat("\n")

cat("\n", "***PERMANOVA for Gower distance, `gower`***", "\n\n")
summary(its18_ps_perfect_adonis2_gower)
cat("\n")
```


#### PIME

```{r}
#| echo: false
#| eval: true
cat("\n", "***PERMANOVA for Jensen-Shannon Divergence, `jsd`***", "\n\n")
its18_ps_pime_adonis2_jsd
cat("\n")

cat("\n", "***PERMANOVA for Bray-Curtis dissimilarity, `bray`***", "\n\n")
its18_ps_pime_adonis2_bray
cat("\n")

cat("\n", "***ANOSIM for Gower distance, `gower`***", "\n\n")
summary(its18_ps_pime_anosim_gower)
cat("\n")
```
:::

</details>

## Summaries 

Here is a quick summary of significance tests for the data sets against three distance matrices.

```{r}
#| echo: false
data_set <- data.frame(c("FULL", "FILT", "PERfect", "PIME"))
its_dist_metric <- data.frame(c("Jensen-Shannon Divergence", "Bray-Curtis dissimilarity", "Gower distance"))

tmp_p_value_work <- data.frame(c(its18_ps_work_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 its18_ps_work_adonis_bray$aov.tab$`Pr(>F)`[1],
                                 its18_ps_work_adonis_gower$aov.tab$`Pr(>F)`[1]))

tmp_p_value_filt <- data.frame(c(its18_ps_filt_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 its18_ps_filt_adonis_bray$aov.tab$`Pr(>F)`[1],
                                 its18_ps_filt_adonis_gower$aov.tab$`Pr(>F)`[1]))

tmp_p_value_perfect <- data.frame(c(its18_ps_perfect_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 its18_ps_perfect_adonis_bray$aov.tab$`Pr(>F)`[1],
                                 its18_ps_perfect_adonis_gower$aov.tab$`Pr(>F)`[1]))

tmp_p_value_pime <- data.frame(c(its18_ps_pime_adonis_jsd$aov.tab$`Pr(>F)`[1],
                                 its18_ps_pime_adonis_bray$aov.tab$`Pr(>F)`[1],
                                 its18_ps_pime_anosim_gower$signif))

its18_tab_sig_test <- dplyr::bind_cols(its_dist_metric, tmp_p_value_work) %>%
                      dplyr::bind_cols(., tmp_p_value_filt) %>%
                      dplyr::bind_cols(., tmp_p_value_perfect) %>%
                      dplyr::bind_cols(., tmp_p_value_pime)  %>%
  dplyr::rename("distance metric" = 1, "FULL" = 2, "FILT" = 3, "PERfect" = 4, "PIME" = 5) 

its18_tab_sig_test <- its18_tab_sig_test %>%  
  dplyr::mutate(across(.cols = c(2:ncol(its18_tab_sig_test)), round, digits = 4))
rm(list = ls(pattern = "tmp_"))
```
<small>`r caption_tab_its("its_sign_tests")`</small>

```{r}
#| echo: false
#| eval: true
seq_table <- its18_tab_sig_test
seq_table %>%
  download_this(
    output_name = "its_sign_tests",
    output_extension = ".csv",
    button_label = "Download data as csv file",
    button_type = "default",
    csv2 = FALSE,
    has_icon = TRUE,
    icon = "fa fa-save")
```

```{r}
#| echo: false
#| eval: true
reactable(seq_table,
  defaultColDef = colDef(
    header = function(value) gsub("_", " ", value, fixed = TRUE),
    cell = function(value) format(value, nsmall = 3),
    align = "center", filterable = FALSE, sortable = FALSE, resizable = TRUE,
    footerStyle = list(fontWeight = "bold"), minWidth = 100, headerVAlign = "center",
    style = function(value) {
                                         if (value > 0.05) {
                                           color <- "#2271B2"
                                         } else if (value < 0.05) {
                                           color <- "#B22271"
                                         } else {
                                           color <- "#777"
                                         }
                                         list(color = color, fontWeight = "bold")
                            }
    ), 
  columns = list(
    `distance metric` = colDef(name = "Distance metric", 
                       sticky = "left", 
                       style = list(borderRight = "1px solid #eee"),
                       headerStyle = list(borderRight = "1px solid #eee"), 
                       align = "left",
                       minWidth = 200),
    dist = colDef(name = "distance", align = "left")
    ),
  columnGroups = list(colGroup(name = "p-values", columns = c("FULL", "FILT", "PERfect", "PIME"),
                       headerStyle = list(fontSize = "1.3em"))
    ),
  searchable = FALSE, defaultPageSize = 12, showPagination = FALSE,
  pageSizeOptions = c(5, 10, nrow(seq_table)), 
  showPageSizeOptions = FALSE, highlight = TRUE, 
  bordered = TRUE, striped = TRUE, compact = TRUE, 
  wrap = TRUE, showSortable = FALSE, fullWidth = TRUE,
  theme = reactableTheme(style = list(fontSize = "0.9em")))
rm(seq_table)
```


```{r}
#| echo: false
save.image("page_build/beta_wf_part_1.rdata")
```

# Ordinations

```{r}
#| echo: false
#| eval: true
load("page_build/beta_wf_part_2.rdata")
```

```{r}
#| echo: false
remove(list = ls())
load("page_build/beta_wf_part_1.rdata")
gdata::keep(ssu18_ps_work, ssu18_ps_filt, ssu18_ps_pime, ssu18_ps_perfect, 
            ssu18_ps_work_prop, ssu18_ps_filt_prop, ssu18_ps_pime_prop, ssu18_ps_perfect_prop, 
            its18_ps_work, its18_ps_filt, its18_ps_pime, its18_ps_perfect, 
            its18_ps_work_prop, its18_ps_filt_prop, its18_ps_pime_prop, its18_ps_perfect_prop, 
            swel_col, sure = TRUE)
ssu18_ps_work_me <- readRDS("files/taxa/rdata/ssu18_ps_work_me.rds")
ssu18_ps_filt_me <- readRDS("files/taxa/rdata/ssu18_ps_filt_me.rds")
ssu18_ps_perfect_me <- readRDS("files/taxa/rdata/ssu18_ps_perfect_me.rds")
ssu18_ps_pime_me <- readRDS("files/taxa/rdata/ssu18_ps_pime_me.rds")
its18_ps_work_me <- readRDS("files/taxa/rdata/its18_ps_work_me.rds")
its18_ps_filt_me <- readRDS("files/taxa/rdata/its18_ps_filt_me.rds")
its18_ps_perfect_me <- readRDS("files/taxa/rdata/its18_ps_perfect_me.rds")
its18_ps_pime_me <- readRDS("files/taxa/rdata/its18_ps_pime_me.rds")
objects()
```

Now we can visualize the **Jensen-Shannon Divergence**, **unweighted-UniFrac**,  and **weighted-UniFrac** distance matrices to access dissimilarity among sample. Here we ordinate using Principal Coordinate Analysis (PCoA) but we could also test other methods like NMDS, CCA, etc. We will also test the whether there are any differences in ordination between the `phyloseq` package and the [`microeco` package](https://github.com/ChiLiubio/microeco).

#### Plot Code

<details markdown="1">
<summary><strong>Code to reproduce plots</strong></summary>

**We begin with the code for the 16S rRNA data.**

First the code for ordination implementation in `phyloseq`. 

```{r}
ssu18_data_sets <- c("ssu18_ps_work", "ssu18_ps_filt", "ssu18_ps_perfect", "ssu18_ps_pime")
ssu_dist <- c("jsd", "unifrac", "wunifrac")
for (samp_ps in ssu18_data_sets) {
for (d in ssu_dist){
     tmp_get <- get(purrr::map_chr(samp_ps, ~ paste0(., "_prop")))
     ord_meths <- c("NMDS", "PCoA", "CCA", "DCA") # MDS = PCoA, "CCA", "DCA", "DPCoA", "RDA"
     tmp_plist <- plyr::llply(as.list(ord_meths), function(i, physeq, d) {
        ordi = ordinate(physeq, method = i, distance = d)
        plot_ordination(physeq, ordi, "samples", color = "TEMP")
   }, tmp_get, d)

  names(tmp_plist) <- ord_meths

  tmp_df <- plyr::ldply(tmp_plist, function(x){
      df = x$data[, 1:2]
      colnames(df) = c("Axis_1", "Axis_2")
      return(cbind(df, x$data))})
  names(tmp_df)[1] = "method"
  
  tmp_plot <- ggplot(tmp_df, aes(Axis_1, Axis_2, color = TEMP, shape = TEMP, fill = TEMP))
  tmp_plot <- tmp_plot + geom_point(size = 4)
  tmp_plot <- tmp_plot + facet_wrap(~method, scales = "free")
  tmp_plot <- tmp_plot + scale_colour_manual(values = swel_col)
  
  tmp_df_name <- purrr::map_chr(d, ~ paste0(samp_ps, "_dist_", .))
  tmp_plist_name <- purrr::map_chr(d, ~ paste0(samp_ps, "_", ., "_plist"))
  tmp_plot_name <- purrr::map_chr(d, ~ paste0(samp_ps, "_dist_", ., "_plot"))
  tmp_list <- list("tmp_df_name" = tmp_df, tmp_plist_name = tmp_plist, tmp_plot_name = tmp_plot)
  assign(paste0(samp_ps, "_",  d, "_ord_results"), tmp_list)
  rm(list = ls(pattern = "_tmp"))
 }
}
```

```{r}
plist_name <- objects(pattern="_ord_results")
plot_num <- c(1,2,3,4)
for (i in plist_name) {
  for (j in plot_num) {
       tmp_get_i <- get(i)$tmp_plist_name
       tmp_ord <- names(tmp_get_i)[j]
       tmp_name <- stringr::str_replace(i, "ord_results", tmp_ord)
       tmp_plot <- tmp_get_i[[j]] + scale_colour_manual(values = swel_col)
       tmp_plot <- tmp_plot + geom_point(size = 4, aes(shape = TEMP)) +
         theme(legend.position = "bottom")
       tmp_plot$labels$shape <- "TEMP"
       assign(tmp_name, tmp_plot)
       rm(list = ls(pattern = "tmp_"))
  }
}
```

And now the code for ordination implementation in `microeco`. 

```{r}
microeco_path <- "files/beta/microeco/"
for (i in ssu18_data_sets) {
  tmp_dataset <- get(purrr::map_chr(i, ~paste0(., "_me")))
  tmp_dataset$cal_betadiv(unifrac = TRUE)
#### CODE TO ADD JSD DISTANCE ####  
  tmp_jsd <- phyloseq::distance(get(i), method = "jsd") 
  tmp_jsd <- forceSymmetric(as.matrix(tmp_jsd), uplo = "L")
  tmp_jsd <- as.matrix(tmp_jsd)
  tmp_dataset$beta_diversity$jsd <- tmp_jsd
#### #### #### #### #### #### #### ####  
  dir.create(paste(microeco_path, i, "/metrics/", sep = ""), recursive = TRUE)
  tmp_dataset$save_betadiv(dirpath = paste(microeco_path, i, "/metrics/", sep = ""))
  rm(list = ls(pattern = "tmp_"))
}
```

```{r}
#| echo: true
#| eval: true
class(ssu18_ps_perfect_me$beta_diversity)
summary(ssu18_ps_perfect_me$beta_diversity)
```

Here I made a custom "function" to run the analysis, plot the graphs, save graph objects, and save plots (as `.png` and `.pdf` files). I am sure an actual programmer would be shocked, but it works. 

```{r}
microeco_beta_plot <- function(choose_input, choose_metric, choose_ord) {  
  tmp_dataset <- get(purrr::map_chr(choose_input, ~paste0(., "_me")))
  tmp_t1 <- trans_beta$new(dataset = tmp_dataset, group = "TEMP", measure = choose_metric)
  tmp_t1$cal_ordination(ordination = choose_ord)
  tmp_t1_ord_plot <- tmp_t1$plot_ordination(plot_color = "TEMP", 
                                            plot_shape = "TEMP", 
                                            plot_group_ellipse = FALSE, 
                                            color_values = swel_col, 
                                            shape_values = c(16, 17, 15)) + 
                       geom_point(size = 4) +  theme(legend.position = "bottom")
  tmp_t1$cal_group_distance()
  tmp_t1_within_group_plot <- tmp_t1$plot_group_distance(distance_pair_stat = TRUE, color_values = swel_col)
  tmp_t1$res_group_distance
  tmp_t1$cal_group_distance(within_group = FALSE)
  tmp_t1_btwn_group_plot <- tmp_t1$plot_group_distance(distance_pair_stat = TRUE, color_values = swel_col) 

###### SET names
  tmp_name_ord <- paste(choose_input, "_me_", choose_metric, "_", choose_ord, sep = "")
  tmp_name_wg <- paste(choose_input, "_me_wg_", choose_metric, "_", choose_ord, sep = "")
  tmp_name_bg <- paste(choose_input, "_me_bg_", choose_metric, "_", choose_ord, sep = "")
  
  assign(tmp_name_ord, tmp_t1_ord_plot, envir = parent.frame() )
  assign(tmp_name_wg, tmp_t1_within_group_plot, envir = parent.frame() )
  assign(tmp_name_bg, tmp_t1_btwn_group_plot, envir = parent.frame() )
###### SET paths
  dir.create(paste(microeco_path, choose_input, "/ordination/", sep = ""), recursive = TRUE)
  tmp_path <- paste(microeco_path, choose_input, "/ordination/", sep = "")
  tmp_path_ord <- paste(tmp_path, "ord_plots/", sep = "")
  tmp_path_wg <- paste(tmp_path, "within_group/", sep = "")
  tmp_path_bg <- paste(tmp_path, "between_group/", sep = "")
###### SAVE plots  
  ggplot2::ggsave(tmp_t1_ord_plot, path = paste(tmp_path_ord, sep = ""), filename = paste0(tmp_name_ord, ".png", sep = ""))
  ggplot2::ggsave(tmp_t1_ord_plot, path = paste(tmp_path_ord, sep = ""), filename = paste0(tmp_name_ord, ".pdf", sep = ""))                    
  ggplot2::ggsave(tmp_t1_within_group_plot, path = paste(tmp_path_wg, sep = ""), filename = paste0(tmp_name_wg, ".png", sep = ""))
  ggplot2::ggsave(tmp_t1_within_group_plot, path = paste(tmp_path_wg, sep = ""), filename = paste0(tmp_name_wg, ".pdf", sep = ""))                  
  ggplot2::ggsave(tmp_t1_btwn_group_plot, path = paste(tmp_path_bg, sep = ""), filename = paste0(tmp_name_bg, ".png", sep = ""))
  ggplot2::ggsave(tmp_t1_btwn_group_plot, path = paste(tmp_path_bg, sep = ""), filename = paste0(tmp_name_bg, ".pdf", sep = ""))                  
  rm(list = ls(pattern = "tmp_"))
}
```

And then run it like so:

```{r}
microeco_beta_plot(choose_input = "ssu18_ps_pime", choose_metric = "bray", choose_ord = "PCoA")
```

It would be super cool to have a function that looped through a bunch of data sets, distance metrics, and ordination methods. 

```{r}
for (j in 1:length(get(paste("ssu18_ps_work", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("ssu18_ps_work", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "ssu18_ps_work", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}

for (j in 1:length(get(paste("ssu18_ps_filt", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("ssu18_ps_filt", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "ssu18_ps_filt", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}

for (j in 1:length(get(paste("ssu18_ps_perfect", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("ssu18_ps_perfect", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "ssu18_ps_perfect", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}

for (j in 1:length(get(paste("ssu18_ps_pime", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("ssu18_ps_pime", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "ssu18_ps_pime", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}
```


```{r}
#| echo: false
ssu18_ps_work_title <- "FULL Ordination Plots"
ssu18_ps_filt_title <- "Arbitrary Ordination Plots"
ssu18_ps_perfect_title <- "PERfect Ordination Plots"
ssu18_ps_pime_title <- "PIME Ordination Plots"

for (samp_ps in ssu18_data_sets) {
  tmp_combo_plot <- (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_jsd_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_unifrac_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_wunifrac_PCoA"))) 
    ) /
                    (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me",  "_jsd_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me", "_unwei_unifrac_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me", "_wei_unifrac_PCoA")))
    ) + 
    geom_point(size = 1, show.legend = FALSE)
  tmp_title <- paste(samp_ps, "_title", sep = "")
  tmp_combo_plot <-  tmp_combo_plot +
  plot_annotation(title = get(tmp_title),
    subtitle = 'Comparisons of three distance metrics. Implemented in phyloseq (top) and microeco (bottom).') +
  plot_layout(widths = c(3, 3), guides = "collect") &
  theme(plot.title = element_text(size = 18),
        plot.subtitle = element_text(size = 16),
        plot.tag = element_text(size = 12),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        legend.justification = "center",
        legend.title = element_text(size = rel(1.75)),
        legend.text = element_text(size = rel(1.5)))
  tmp_combo_plot_name <- purrr::map_chr(samp_ps, ~ paste0(., "_plots"))
  assign(tmp_combo_plot_name, tmp_combo_plot)
  rm(list = ls(pattern = "tmp_"))
}
```

```{r}
#| echo: false
for (i in ssu18_data_sets) {
  dir.create(paste("files/beta/figures/combo_plots", sep = ""), recursive = TRUE)
  tmp_path <- paste("files/beta/figures/combo_plots", sep = "")
  tmp_filename <- paste(i, "_beta_div_ord_plots", sep="")
  tmp_get_plot <- get(purrr::map_chr(i, ~ paste0(., "_plots")))
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".png", sep = ""), height = 28, width = 36,
    units = 'cm', dpi = 600, bg = "white")
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".pdf", sep = ""), height = 10, width = 12)
}  
```

```{r}
#| echo: false
system("cp files/beta/figures/combo_plots/ssu18_ps_work_beta_div_ord_plots.png include/beta/ssu18_ps_work_beta_div_ord_plots.png")
system("cp files/beta/figures/combo_plots/ssu18_ps_filt_beta_div_ord_plots.png include/beta/ssu18_ps_filt_beta_div_ord_plots.png")
system("cp files/beta/figures/combo_plots/ssu18_ps_perfect_beta_div_ord_plots.png include/beta/ssu18_ps_perfect_beta_div_ord_plots.png")
system("cp files/beta/figures/combo_plots/ssu18_ps_pime_beta_div_ord_plots.png include/beta/ssu18_ps_pime_beta_div_ord_plots.png")
```

**And now the ITS code.**

```{r}
its18_data_sets <- c("its18_ps_work", "its18_ps_filt", "its18_ps_perfect", "its18_ps_pime")
its_dist <- c("jsd", "bray", "gower")
for (samp_ps in its18_data_sets) {
for (d in its_dist){
     tmp_get <- get(purrr::map_chr(samp_ps, ~ paste0(., "_prop")))
     ord_meths <- c("NMDS", "PCoA", "CCA", "DCA") # MDS = PCoA, "CCA", "DCA", "DPCoA", "RDA"
     tmp_plist <- plyr::llply(as.list(ord_meths), function(i, physeq, d) {
        ordi = ordinate(physeq, method = i, distance = d)
        plot_ordination(physeq, ordi, "samples", color = "TEMP")
   }, tmp_get, d)

  names(tmp_plist) <- ord_meths

  tmp_df <- plyr::ldply(tmp_plist, function(x){
      df = x$data[, 1:2]
      colnames(df) = c("Axis_1", "Axis_2")
      return(cbind(df, x$data))})
  names(tmp_df)[1] = "method"
  
  tmp_plot <- ggplot(tmp_df, aes(Axis_1, Axis_2, color = TEMP, shape = TEMP, fill = TEMP))
  tmp_plot <- tmp_plot + geom_point(size = 4)
  tmp_plot <- tmp_plot + facet_wrap(~method, scales = "free")
  tmp_plot <- tmp_plot + scale_colour_manual(values = swel_col)
  
  tmp_df_name <- purrr::map_chr(d, ~ paste0(samp_ps, "_dist_", .))
  tmp_plist_name <- purrr::map_chr(d, ~ paste0(samp_ps, "_", ., "_plist"))
  tmp_plot_name <- purrr::map_chr(d, ~ paste0(samp_ps, "_dist_", ., "_plot"))
  tmp_list <- list("tmp_df_name" = tmp_df, tmp_plist_name = tmp_plist, tmp_plot_name = tmp_plot)
  assign(paste0(samp_ps, "_",  d, "_ord_results"), tmp_list)
  rm(list = ls(pattern = "_tmp"))
 }
}
```

```{r}
plist_name <- objects(pattern="_ord_results")
plot_num <- c(1,2,3,4)
for (i in plist_name) {
  for (j in plot_num) {
       tmp_get_i <- get(i)$tmp_plist_name
       tmp_ord <- names(tmp_get_i)[j]
       tmp_name <- stringr::str_replace(i, "ord_results", tmp_ord)
       tmp_plot <- tmp_get_i[[j]] + scale_colour_manual(values = swel_col)
       tmp_plot <- tmp_plot + geom_point(size = 4, aes(shape = TEMP)) +
         theme(legend.position = "bottom")
       tmp_plot$labels$shape <- "TEMP"
       assign(tmp_name, tmp_plot)
       rm(list = ls(pattern = "tmp_"))
  }
}
```

And now the code for ordination implementation in `microeco`. 

```{r}
microeco_path <- "files/beta/microeco/"
for (i in its18_data_sets) {
  tmp_dataset <- get(purrr::map_chr(i, ~paste0(., "_me")))
  tmp_dataset$cal_betadiv(unifrac = FALSE)
#### CODE TO ADD JSD DISTANCE ####  
  tmp_jsd <- phyloseq::distance(get(i), method = "jsd") 
  tmp_jsd <- forceSymmetric(as.matrix(tmp_jsd), uplo = "L")
  tmp_jsd <- as.matrix(tmp_jsd)
  tmp_dataset$beta_diversity$jsd <- tmp_jsd
#### CODE TO ADD GOWER DISTANCE ####  
  tmp_gower <- phyloseq::distance(get(i), method = "gower") 
  tmp_gower <- forceSymmetric(as.matrix(tmp_gower), uplo = "L")
  tmp_gower <- as.matrix(tmp_gower)
  tmp_dataset$beta_diversity$gower <- tmp_gower
#### #### #### #### #### #### #### ####  
  dir.create(paste(microeco_path, i, "/metrics/", sep = ""), recursive = TRUE)
  tmp_dataset$save_betadiv(dirpath = paste(microeco_path, i, "/metrics/", sep = ""))
  rm(list = ls(pattern = "tmp_"))
}
```

```{r}
#| echo: true
#| eval: true
class(its18_ps_perfect_me$beta_diversity)
summary(its18_ps_perfect_me$beta_diversity)
```

Here we call the custom function described above. 

```{r}
for (j in 1:length(get(paste("its18_ps_work", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("its18_ps_work", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "its18_ps_work", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}

for (j in 1:length(get(paste("its18_ps_filt", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("its18_ps_filt", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "its18_ps_filt", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}

for (j in 1:length(get(paste("its18_ps_perfect", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("its18_ps_perfect", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "its18_ps_perfect", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}

for (j in 1:length(get(paste("its18_ps_pime", "_me", sep = ""))$beta_diversity)) {
  tmp_metric <- names(get(paste("its18_ps_pime", "_me", sep = ""))$beta_diversity[j])
  microeco_beta_plot(choose_input = "its18_ps_pime", choose_metric = tmp_metric, choose_ord = "PCoA")
  rm(list = ls(pattern = "tmp_"))
}
```


```{r}
#| echo: false
its18_ps_work_title <- "FULL Ordination Plots"
its18_ps_filt_title <- "Arbitrary Ordination Plots"
its18_ps_perfect_title <- "PERfect Ordination Plots"
its18_ps_pime_title <- "PIME Ordination Plots"

for (samp_ps in its18_data_sets) {
  tmp_combo_plot <- (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_jsd_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_bray_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_gower_PCoA"))) 
    ) /
                    (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me",  "_jsd_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me", "_bray_PCoA"))) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me", "_gower_PCoA")))
    ) + 
    geom_point(size = 1, show.legend = FALSE)
  tmp_title <- paste(samp_ps, "_title", sep = "")
  tmp_combo_plot <-  tmp_combo_plot +
  plot_annotation(title = get(tmp_title),
    subtitle = 'Comparisons of three distance metrics. Implemented in phyloseq (top) and microeco (bottom).') +
  plot_layout(widths = c(3, 3), guides = "collect") &
  theme(plot.title = element_text(size = 18),
        plot.subtitle = element_text(size = 16),
        plot.tag = element_text(size = 12),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 10),
        legend.position = "bottom",
        legend.justification = "center",
        legend.title = element_text(size = rel(1.75)),
        legend.text = element_text(size = rel(1.5)))
  tmp_combo_plot_name <- purrr::map_chr(samp_ps, ~ paste0(., "_plots"))
  assign(tmp_combo_plot_name, tmp_combo_plot)
  rm(list = ls(pattern = "tmp_"))
}

its18_ps_pime_plots
```

```{r}
#| echo: false
for (i in its18_data_sets) {
  dir.create(paste("files/beta/figures/combo_plots", sep = ""), recursive = TRUE)
  tmp_path <- paste("files/beta/figures/combo_plots", sep = "")
  tmp_filename <- paste(i, "_beta_div_ord_plots", sep="")
  tmp_get_plot <- get(purrr::map_chr(i, ~ paste0(., "_plots")))
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".png", sep = ""), height=28, width=36,
    units = 'cm', dpi = 600, bg = "white")
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".pdf", sep = ""), height=10, width=12)
}  
```

```{r}
#| echo: false
system("cp files/beta/figures/combo_plots/its18_ps_work_beta_div_ord_plots.png include/beta/its18_ps_work_beta_div_ord_plots.png")
system("cp files/beta/figures/combo_plots/its18_ps_filt_beta_div_ord_plots.png include/beta/its18_ps_filt_beta_div_ord_plots.png")
system("cp files/beta/figures/combo_plots/its18_ps_perfect_beta_div_ord_plots.png include/beta/its18_ps_perfect_beta_div_ord_plots.png")
system("cp files/beta/figures/combo_plots/its18_ps_pime_beta_div_ord_plots.png include/beta/its18_ps_pime_beta_div_ord_plots.png")
```
</details>

<br/>

## 16S rRNA

::: {.column-body-outset}
::: {.panel-tabset}

#### FULL 

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_work_beta_div_ord_plots.png")
```
<small>`r caption_fig_ssu("ssu_beta_div_plots_full")`</small>


#### Arbitrary

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_filt_beta_div_ord_plots.png")
```
<small>`r caption_fig_ssu("ssu_beta_div_plots_filt")`</small>

#### PERfect

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_perfect_beta_div_ord_plots.png")
```
<small>`r caption_fig_ssu("ssu_beta_div_plots_perfect")`</small>

#### PIME

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_pime_beta_div_ord_plots.png")
```
<small>`r caption_fig_ssu("ssu_beta_div_plots_pime")`</small>
:::
:::

## ITS

::: {.column-body-outset}
::: {.panel-tabset}

#### Arbitrary 

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_work_beta_div_ord_plots.png")
```
<small>`r caption_fig_its("its_beta_div_plots_full")`</small>


#### FILT 

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_filt_beta_div_ord_plots.png")
```
<small>`r caption_fig_its("its_beta_div_plots_filt")`</small>

#### PERfect

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_perfect_beta_div_ord_plots.png")
```
<small>`r caption_fig_its("its_beta_div_plots_perfect")`</small>

#### PIME

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_pime_beta_div_ord_plots.png")
```
<small>`r caption_fig_its("its_beta_div_plots_pime")`</small>
:::
:::


```{r}
#| echo: false
## NEXT few blocks are to modify with and between group plots
for (i in objects(pattern = "_wg_")) {
  tmp_dataset <- get(i)
  tmp_wg <- tmp_dataset + geom_boxplot(fill=swel_col) + 
    scale_colour_manual(values=c("#191919", "#191919", "#191919"))
  tmp_name <- purrr::map_chr(i, ~ paste0(., "_mod"))
  assign(tmp_name, tmp_wg)
  rm(list = ls(pattern = "tmp_"))
}
```

```{r}
#| echo: false
#| eval: false
btw_colors <- c("#FF00FF", "#FFFF00", "#00FFFF")
for (i in objects(pattern = "_bg_")) {
  tmp_dataset <- get(i)
  tmp_wg <- tmp_dataset + geom_boxplot(fill = "grey90") + 
    scale_colour_manual(values=c("#191919", "#191919", "#191919"))
  tmp_name <- purrr::map_chr(i, ~ paste0(., "_mod"))
  assign(tmp_name, tmp_wg)
  rm(list = ls(pattern = "tmp_"))
}
```

```{r}
#| echo: false
for (i in objects(pattern = "_jsd_PCoA_mod")) {
  tmp_wg <- get(i)
  tmp_wg <- tmp_wg + ylab("Jensen-Shannon divergence")
  tmp_name <- i
  assign(tmp_name, tmp_wg)
  rm(list = ls(pattern = "tmp_"))
}

for (i in objects(pattern = "_bray_PCoA_mod")) {
  tmp_wg <- get(i)
  tmp_wg <- tmp_wg + ylab("Bray-Curtis dissimilarity")
  tmp_name <- i
  assign(tmp_name, tmp_wg)
  rm(list = ls(pattern = "tmp_"))
}

for (i in objects(pattern = "_gower_PCoA_mod")) {
  tmp_wg <- get(i)
  tmp_wg <- tmp_wg + ylab("Gower distance")
  tmp_name <- i
  assign(tmp_name, tmp_wg)
  rm(list = ls(pattern = "tmp_"))
}
```

# Within & Between Group Distances

Above we calculated the sample distances within groups. Let's see what those plots look like.

## 16S rRNA

```{r}
#| echo: false
ssu18_ps_work_title <- "FULL (unfiltered)"
ssu18_ps_filt_title <- "Arbitrary filtered"
ssu18_ps_perfect_title <- "PERfect filtered"
ssu18_ps_pime_title <- "PIME filtered"

for (samp_ps in ssu18_data_sets) {
  tmp_combo_plot <- (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_wg_jsd_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +  ggtitle("Within-group") +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_wg_unwei_unifrac_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_wg_wei_unifrac_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) 
    ) /
    (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_bg_jsd_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE)  + ggtitle(title = "Between-group") +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_bg_unwei_unifrac_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_bg_wei_unifrac_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE)
    )
  
  tmp_title <- paste(samp_ps, "_title", sep = "")
  tmp_combo_plot <-  tmp_combo_plot +
  plot_annotation(title = get(tmp_title),
    subtitle = 'Treatment-level variation of three distance metrics.') +
  plot_layout(widths = c(6, 6), guides = "collect") &
  theme(plot.title = element_text(size = 18),
        plot.subtitle = element_text(size = 16),
        plot.tag = element_text(size = 12),
        axis.title = element_text(size = 13),
        axis.text = element_text(size = 10),
        axis.text.x = element_text(size = 14),
        legend.position = "none",
        legend.justification = "center",
        legend.title = element_text(size = rel(1.75)),
        legend.text = element_text(size = rel(1.5)))
  tmp_combo_plot_name <- purrr::map_chr(samp_ps, ~ paste0(., "_me_variation_plots"))
  assign(tmp_combo_plot_name, tmp_combo_plot)
  rm(list = ls(pattern = "tmp_"))
}
ssu18_ps_pime_me_variation_plots
objects(pattern = "_plots")
```

```{r}
#| echo: false
for (i in ssu18_data_sets) {
  dir.create(paste("files/beta/figures/combo_plots", sep = ""), recursive = TRUE)
  tmp_path <- paste("files/beta/figures/combo_plots", sep = "")
  tmp_filename <- paste(i, "_variation_plots", sep="")
  tmp_get_plot <- get(purrr::map_chr(i, ~ paste0(., "_me_variation_plots")))
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".png", sep = ""), height=26, width=36,
    units = 'cm', dpi = 600, bg = "white")
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".pdf", sep = ""), height=9, width=12)
}  
```

```{r}
#| echo: false
system("cp files/beta/figures/combo_plots/ssu18_ps_work_variation_plots.png include/beta/ssu18_ps_work_variation_plots.png")
system("cp files/beta/figures/combo_plots/ssu18_ps_filt_variation_plots.png include/beta/ssu18_ps_filt_variation_plots.png")
system("cp files/beta/figures/combo_plots/ssu18_ps_perfect_variation_plots.png include/beta/ssu18_ps_perfect_variation_plots.png")
system("cp files/beta/figures/combo_plots/ssu18_ps_pime_variation_plots.png include/beta/ssu18_ps_pime_variation_plots.png")
```

::: {.column-body-outset}
::: {.panel-tabset}

#### FULL 

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_work_variation_plots.png")
```
<small>`r caption_fig_ssu("ssu_variation_plots_full")`</small>


#### Arbitrary

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_filt_variation_plots.png")
```
<small>`r caption_fig_ssu("ssu_variation_plots_filt")`</small>

#### PERfect

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_perfect_variation_plots.png")
```
<small>`r caption_fig_ssu("ssu_variation_plots_perfect")`</small>

#### PIME

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/ssu18_ps_pime_variation_plots.png")
```
<small>`r caption_fig_ssu("ssu_variation_plots_pime")`</small>
:::
:::

## ITS

```{r}
#| echo: false
its18_ps_work_title <- "FULL (unfiltered)"
its18_ps_filt_title <- "Arbitrary filtered"
its18_ps_perfect_title <- "PERfect filtered"
its18_ps_pime_title <- "PIME filtered"

for (samp_ps in its18_data_sets) {
  tmp_combo_plot <- (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_wg_jsd_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +  ggtitle("Within-group")+
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_wg_bray_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_wg_gower_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE)
    ) /
    (
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_bg_jsd_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +  ggtitle("Between-group")+
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_bg_bray_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE) +
    get(purrr::map_chr(samp_ps, ~ paste0(., "_me_bg_gower_PCoA_mod"))) + geom_point(size = 2, show.legend = FALSE)
    )
  
  tmp_title <- paste(samp_ps, "_title", sep = "")
  tmp_combo_plot <-  tmp_combo_plot +
  plot_annotation(title = get(tmp_title),
    subtitle = 'Treatment-level variation of three distance metrics.') +
  plot_layout(widths = c(6, 6), guides = "collect") &
  theme(plot.title = element_text(size = 18),
        plot.subtitle = element_text(size = 16),
        plot.tag = element_text(size = 12),
        axis.title = element_text(size = 13),
        axis.text = element_text(size = 10),
        axis.text.x = element_text(size = 14),
        legend.position = "none",
        legend.justification = "center",
        legend.title = element_text(size = rel(1.75)),
        legend.text = element_text(size = rel(1.5)))
  tmp_combo_plot_name <- purrr::map_chr(samp_ps, ~ paste0(., "_me_variation_plots"))
  assign(tmp_combo_plot_name, tmp_combo_plot)
  rm(list = ls(pattern = "tmp_"))
}
its18_ps_pime_me_variation_plots
objects(pattern = "_plots")
```

```{r}
#| echo: false
for (i in its18_data_sets) {
  dir.create(paste("files/beta/figures/combo_plots", sep = ""), recursive = TRUE)
  tmp_path <- paste("files/beta/figures/combo_plots", sep = "")
  tmp_filename <- paste(i, "_variation_plots", sep="")
  tmp_get_plot <- get(purrr::map_chr(i, ~ paste0(., "_me_variation_plots")))
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".png", sep = ""), height=26, width=36,
    units = 'cm', dpi = 600, bg = "white")
  ggplot2::ggsave(tmp_get_plot, path = tmp_path, filename = paste(tmp_filename, ".pdf", sep = ""), height=9, width=12)
}  
```

```{r}
#| echo: false
system("cp files/beta/figures/combo_plots/its18_ps_work_variation_plots.png include/beta/its18_ps_work_variation_plots.png")
system("cp files/beta/figures/combo_plots/its18_ps_filt_variation_plots.png include/beta/its18_ps_filt_variation_plots.png")
system("cp files/beta/figures/combo_plots/its18_ps_perfect_variation_plots.png include/beta/its18_ps_perfect_variation_plots.png")
system("cp files/beta/figures/combo_plots/its18_ps_pime_variation_plots.png include/beta/its18_ps_pime_variation_plots.png")
```

::: {.column-body-outset}
::: {.panel-tabset}

#### FULL 

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_work_variation_plots.png")
```
<small>`r caption_fig_its("its_variation_plots_full")`</small>


#### Arbitrary 

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_filt_variation_plots.png")
```
<small>`r caption_fig_its("its_variation_plots_filt")`</small>

#### PERfect

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_perfect_variation_plots.png")
```
<small>`r caption_fig_its("its_variation_plots_perfect")`</small>

#### PIME

```{r}
#| echo: false
#| eval: true
#| warning: false
knitr::include_graphics("include/beta/its18_ps_pime_variation_plots.png")
```
<small>`r caption_fig_its("its_variation_plots_pime")`</small>
:::
:::

```{r}
#| echo: false
#objects()
#rm(ssu18_ps_filt, ssu18_ps_work, ssu18_ps_perfect, ssu18_ps_pime)
save.image("page_build/beta_wf_part_2.rdata")
```

```{r}
#| include: false
#| eval: true
remove(list = ls())
```

# Workflow Output 

Data products generated in this workflow can be downloaded from figshare.

<iframe src="https://widgets.figshare.com/articles/16828063/embed?show_title=1" width="100%" height="251" allowfullscreen frameborder="0"></iframe>

</br>

<a href="da.html" class="btnnav button_round" style="float: right;">Next workflow:
<br> 7. Differentially Abundant ASVs & Taxa</a>
<a href="alpha.html" class="btnnav button_round" style="float: left;">Previous workflow:
<br> 5. Alpha Diversity Estimates</a><br><br>

```{r}
#| message: false 
#| results: hide
#| eval: true
#| echo: false
remove(list = ls())
### COmmon formatting scripts
### NOTE: captioner.R must be read BEFORE captions_XYZ.R
source(file.path("assets", "functions.R"))
```

####  Source Code {.appendix}

The source code for this page can be accessed on GitHub `r fa(name = "github")` by [clicking this link](`r source_code()`). 

#### Data Availability {.appendix}

Data generated in this workflow and the Rdata need to run the workflow can be accessed on figshare at [10.25573/data.16828063](https://doi.org/10.25573/data.16828063).

#### Last updated on {.appendix}

```{r}
#| echo: false
#| eval: true
Sys.time()
```
